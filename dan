#!/usr/bin/env python
import sys
import util
import os
import constants

# Keeps a tally of all the MATCHES found.
match_counter = 0

def match_found():
    """
    Arguments: None

    Checks to see if any file match has been found.

    This method prints:
        'NO MATCH' if the condition is met.
    """
    if (match_counter == 0):
        print "NO MATCH"

def process_files(file_path1, file_path2):
    """
    Arguments: filepath x filepath 
    
    Identifies and returns matches between two different files.
    
    This method prints:
        'MATCH ' followed by the resource files of the given 
        file paths if the resource files warrant a match.
        
        OR
        
        'NO MATCH' if the resource files of the given file paths 
        do not match.
    """
    file_name1 = util.get_file_name(file_path1)
    file_name2 = util.get_file_name(file_path2)  
    if (util.is_supported_file(file_path1) 
    and util.is_supported_file(file_path2)):
        files_matched = util.compare(file_path1, file_path2)
        if files_matched:
            global match_counter
            match_counter = match_counter + 1
            print "MATCH %s %s" %  (file_name1, file_name2) 
            #FIX ME: add matching offsets

def main(argv):
    """
    Arguments: argv (stdin)

    Main method that executes our Audio File Comparison Application.
    """

    # Check to see if the given arguments are valid.
    util.check_args(argv)
    
    # Conditions to process and identify matching files.

    # If the input contains two files:
    if argv[1] == '-f' and argv[3] == '-f':
        process_files(argv[2], argv[4])
        match_found()
    # If the input contains a file and a directory:
    elif argv[1] == '-f' and argv[3] == '-d':
        files = os.listdir(argv[4])
        for file in files:
            file_path = util.get_file_path(file, argv[4])
            process_files(argv[2], file_path)
        match_found()
    # If the input contains a directory and a file:
    elif argv[1] == '-d' and argv[3] == '-f':
        files = os.listdir(argv[2])
        for file in files:
            file_path = util.get_file_path(file, argv[2])
            process_files(file_path, argv[4])
        match_found()
    # If the input contains two directories:
    elif argv[1] == '-d' and argv[3] == '-d':
        files1 = os.listdir(argv[2])
        files2 = os.listdir(argv[4])
        for file1 in files1:
            for file2 in files2:
                file_path1 = util.get_file_path(file1, argv[2])
                file_path2 = util.get_file_path(file2, argv[4])
                process_files(file_path1, file_path2)
        match_found()
    util.del_temp_files()

if __name__ == "__main__":
    main(sys.argv)

